from operator import add
#from astropy import units as u
#from astropy.coordinates import SkyCoord
#from astropy.stats import LombScargle
#from gatspy.periodic import LombScargleFast
from functools import partial
#from gatspy import periodic
#import matplotlib.pyplot as plt
#from matplotlib.font_manager import FontProperties
import lomb_scargle_multiband as periodic
from multiprocessing import Pool
import numpy as np
import os
#from sqlite3 import *
import random
from random import shuffle
from random import randint


# In[13]:


#conn = connect('minion_1016_sqlite.db')
#conn = connect('astro_lsst_01_1004_sqlite.db')
#conn = connect('minion_1020_sqlite.db')


# In[14]:


# LSST zero points  u,g,r,i,z,y
zeroPoints = [0,26.5,28.3,28.13,27.79,27.4,26.58]
FWHMeff = [0.8,0.92,0.87,0.83,0.80,0.78,0.76] # arcmins?
pixelScale = 0.2
readOut = 12.7
sigSys = 0.005
flareperiod = 4096
flarecycles = 10
dayinsec=86400
background = 40
# sat mag u,g,r,i,z,y=14.7,15.7,15.8,15.8,15.3 and 13.9
# start date 59580.033829 end date + 10 years
#maglist=[20]*7

lim = [0, 23.5, 24.8, 24.4, 23.9, 23.3, 22.1] # limiting magnitude ugry
sat = [0, 14.7, 15.7, 15.8, 15.8, 15.3, 13.9] # sat mag as above


# In[15]:


looooops = 10000
maglength = 20
freqlength = 20
processors = 20

startnumber = 0                   
endnumber = startnumber + 1

#observingStrategy = 'minion'
observingStrategy = 'astroD'
#observingStrategy = 'panstars'



inFile = '/home/mj1e16/periodic/in'+str(startnumber)+'.txt'
outFile = '/home/mj1e16/periodic/outminion152'+str(startnumber)+'.txt'

#inFile = '/home/ubuntu/vagrant/'+observingStrategy+'/in'+observingStrategy+'KtypefullresultsFile'+str(startnumber)+'.txt'
#outFile = '/home/ubuntu/vagrant/'+observingStrategy+'/out'+observingStrategy+'KtypefullresultsFile'+str(startnumber)+'.txt'

#minion
obs = [[59580.065908, 59581.113486, 59583.200431, 59585.090854, 59586.100551, 59586.307052, 59587.081092, 59589.110728, 59589.126546, 59590.081425, 59590.296738, 59592.33687, 59592.34357, 59594.341307, 59595.29609, 59595.337966, 59596.160299, 59596.166123, 59596.167015, 59597.34817, 59597.360253, 59599.068435, 59599.340335, 59601.122098, 59601.356599, 59602.19532, 59602.219031, 59602.234261, 59602.242935, 59604.073042, 59604.138332, 59604.151841, 59604.152734, 59604.33142, 59605.278395, 59605.281959, 59606.191758, 59606.197116, 59606.319857, 59609.141725, 59609.142619, 59609.149762, 59609.204221, 59609.206009, 59609.302097, 59610.116946, 59610.120969, 59611.117035, 59612.1059, 59612.139932, 59612.158411, 59614.151843, 59615.241102, 59615.356804, 59615.361727, 59616.057838, 59616.148588, 59616.18791, 59616.188804, 59616.195948, 59617.088971, 59617.097485, 59617.163467, 59617.170626, 59617.187054, 59618.075353, 59620.074544, 59620.085743, 59623.34983, 59623.356509, 59623.374795, 59624.370625, 59624.371514, 59625.154935, 59625.165745, 59625.186745, 59625.195684, 59625.20462, 59625.212222, 59625.384318, 59625.394099, 59625.394985, 59627.10959, 59631.139271, 59631.143739, 59631.145087, 59631.336622, 59633.287731, 59633.328295, 59633.344282, 59633.346058, 59633.361191, 59634.396971, 59635.202508, 59635.206528, 59635.209205, 59635.216352, 59636.05473, 59636.06548, 59636.106433, 59636.238708, 59636.368327, 59636.375886, 59636.379435, 59638.070459, 59638.095915, 59639.051667, 59639.281782, 59639.365409, 59639.376952, 59640.089329, 59640.098282, 59640.209664, 59640.241757, 59640.266719, 59640.268501, 59641.06801, 59641.153769, 59642.070555, 59642.073231, 59642.084386, 59642.086168, 59642.307939, 59642.381145, 59643.383644, 59646.322859, 59646.333508, 59647.027417, 59648.232305, 59648.24258, 59648.284433, 59648.30233, 59648.325967, 59649.187144, 59649.200973, 59649.209026, 59649.340429, 59649.352421, 59650.152186, 59650.167391, 59656.088949, 59656.091628, 59661.05016, 59661.118366, 59661.119257, 59661.136325, 59663.136187, 59664.146541, 59664.190243, 59665.037225, 59665.043482, 59666.125581, 59667.035741, 59667.136777, 59667.152376, 59667.161325, 59667.262, 59667.27089, 59667.292226, 59669.120127, 59670.093644, 59670.106149, 59670.108824, 59670.153867, 59674.073132, 59691.191384, 59691.196712, 59691.20698, 59692.129239, 59700.036169, 59700.042399, 59726.035719, 59726.05094, 59747.984922, 59748.03615, 59752.987679, 59757.011197, 59854.252023, 59854.257337, 59854.286899], [59583.200431, 59585.090854, 59586.307052, 59638.070459, 59638.095915, 59639.051667, 59639.281782, 59639.365409, 59639.376952, 59640.089329, 59640.098282, 59640.209664, 59640.241757, 59640.266719, 59640.268501, 59641.06801, 59641.153769, 59667.035741, 59667.136777, 59667.152376, 59667.161325, 59667.262, 59667.27089, 59667.292226, 59670.093644, 59670.106149, 59670.108824, 59670.153867, 59700.036169, 59700.042399], [59609.141725, 59609.142619, 59609.149762, 59609.204221, 59609.206009, 59609.302097, 59612.1059, 59612.139932, 59612.158411, 59617.163467, 59617.170626, 59617.187054, 59635.202508, 59635.206528, 59635.209205, 59635.216352, 59663.136187, 59664.146541, 59664.190243, 59665.037225, 59665.043482, 59666.125581, 59669.120127, 59692.129239, 59726.035719, 59726.05094, 59747.984922, 59748.03615, 59752.987679, 59854.286899], [59601.122098, 59602.19532, 59602.219031, 59602.234261, 59602.242935, 59606.191758, 59606.197116, 59606.319857, 59615.241102, 59615.356804, 59615.361727, 59631.139271, 59631.143739, 59631.145087, 59633.287731, 59633.328295, 59633.344282, 59633.346058, 59633.361191, 59643.383644, 59648.232305, 59648.24258, 59648.284433, 59648.30233, 59648.325967, 59650.152186, 59650.167391, 59757.011197, 59854.252023, 59854.257337], [59590.296738, 59601.356599, 59605.278395, 59605.281959, 59610.116946, 59610.120969, 59611.117035, 59614.151843, 59616.148588, 59616.18791, 59616.188804, 59616.195948, 59631.336622, 59642.070555, 59642.073231, 59642.084386, 59642.086168, 59642.307939, 59642.381145, 59646.322859, 59646.333508, 59649.187144, 59649.200973, 59649.209026, 59649.340429, 59649.352421, 59674.073132, 59691.191384, 59691.196712, 59691.20698], [59581.113486, 59586.100551, 59592.33687, 59592.34357, 59599.068435, 59599.340335, 59604.073042, 59604.138332, 59604.151841, 59604.152734, 59604.33142, 59623.34983, 59623.356509, 59623.374795, 59624.370625, 59624.371514, 59627.10959, 59636.05473, 59636.06548, 59636.106433, 59636.238708, 59636.368327, 59636.375886, 59636.379435, 59656.088949, 59656.091628, 59661.05016, 59661.118366, 59661.119257, 59661.136325], [59580.065908, 59587.081092, 59589.110728, 59589.126546, 59590.081425, 59594.341307, 59595.29609, 59595.337966, 59596.160299, 59596.166123, 59596.167015, 59597.34817, 59597.360253, 59616.057838, 59617.088971, 59617.097485, 59618.075353, 59620.074544, 59620.085743, 59625.154935, 59625.165745, 59625.186745, 59625.195684, 59625.20462, 59625.212222, 59625.384318, 59625.394099, 59625.394985, 59634.396971, 59647.027417]]

#astro
#obs = [[59580.087072, 59580.208131, 59580.319996, 59581.121885, 59581.302513, 59582.297894, 59582.306423, 59583.193169, 59584.186169, 59584.19378, 59586.30875, 59587.149273, 59587.155533, 59587.315661, 59588.315385, 59588.317165, 59588.346066, 59589.098349, 59591.270955, 59592.252789, 59592.254578, 59592.278242, 59592.283605, 59593.349858, 59594.342178, 59594.3543, 59595.360002, 59596.044974, 59596.049412, 59597.222104, 59597.306176, 59597.307066, 59597.344536, 59598.076314, 59598.303352, 59598.304241, 59598.348296, 59598.355449, 59599.152155, 59599.32241, 59599.323299, 59600.155106, 59600.289135, 59600.324376, 59600.339586, 59600.341371, 59602.205074, 59602.272004, 59602.273788, 59603.320213, 59604.116693, 59604.356756, 59605.378338, 59606.082642, 59606.213345, 59607.266187, 59607.268861, 59607.293311, 59607.29865, 59607.320501, 59607.337508, 59609.198862, 59609.200644, 59609.207785, 59610.270002, 59610.277146, 59610.278923, 59611.170162, 59611.189883, 59611.190774, 59611.244697, 59611.362647, 59613.136463, 59613.137355, 59613.251141, 59615.051711, 59616.268607, 59616.27484, 59616.278416, 59616.288277, 59616.301766, 59616.308483, 59616.316096, 59617.150734, 59617.151629, 59617.310563, 59618.343089, 59618.352895, 59618.357347, 59620.240248, 59620.244708, 59620.270647, 59621.28043, 59621.281321, 59623.126991, 59623.240481, 59623.360824, 59625.235904, 59625.26376, 59629.073753, 59629.075539, 59633.06776, 59633.078064, 59633.083091, 59633.282074, 59633.290092, 59633.290983, 59633.303924, 59635.061953, 59635.06688, 59635.102093, 59636.191438, 59636.206316, 59636.213439, 59636.215217, 59637.065296, 59637.337043, 59637.340598, 59637.381096, 59638.079631, 59638.082312, 59638.237912, 59638.2518, 59638.307835, 59638.316724, 59638.331899, 59638.345261, 59638.350591, 59638.354143, 59640.350452, 59640.357548, 59641.177457, 59642.061588, 59642.130183, 59642.166768, 59643.157509, 59643.177992, 59643.181562, 59645.173357, 59645.236983, 59645.262895, 59645.270943, 59645.330398, 59645.333061, 59646.333854, 59646.338293, 59648.32397, 59648.334614, 59649.347867, 59650.312586, 59650.325038, 59650.34368, 59652.239672, 59662.153965, 59662.159767, 59663.06187, 59663.137997, 59663.268806, 59664.176239, 59665.010414, 59667.270812, 59667.287689, 59668.07255, 59668.085993, 59668.111449, 59669.093955, 59669.094846, 59669.106445, 59669.109114, 59670.021291, 59670.163445, 59689.057787, 59691.044547, 59691.06433, 59692.039098, 59692.043122, 59692.059808, 59697.066164, 59697.09824, 59697.107671], [59582.297894, 59582.306423, 59583.193169, 59586.30875, 59638.079631, 59638.082312, 59638.237912, 59638.2518, 59638.307835, 59638.316724, 59638.331899, 59638.345261, 59638.350591, 59638.354143, 59640.350452, 59640.357548, 59645.173357, 59645.236983, 59645.262895, 59645.270943, 59645.330398, 59645.333061, 59667.270812, 59667.287689, 59669.093955, 59669.094846, 59669.106445, 59669.109114, 59670.021291, 59670.163445], [59584.186169, 59584.19378, 59604.116693, 59607.266187, 59607.268861, 59607.293311, 59607.29865, 59607.320501, 59607.337508, 59613.136463, 59613.137355, 59613.251141, 59617.150734, 59617.151629, 59617.310563, 59642.061588, 59642.130183, 59642.166768, 59646.333854, 59646.338293, 59663.06187, 59663.137997, 59664.176239, 59665.010414, 59692.039098, 59692.043122, 59692.059808, 59697.066164, 59697.09824, 59697.107671], [59588.315385, 59588.317165, 59588.346066, 59610.270002, 59610.277146, 59610.278923, 59616.268607, 59616.27484, 59616.278416, 59616.288277, 59616.301766, 59616.308483, 59616.316096, 59635.061953, 59635.06688, 59635.102093, 59637.065296, 59637.337043, 59637.340598, 59637.381096, 59643.157509, 59643.177992, 59643.181562, 59649.347867, 59668.07255, 59668.085993, 59668.111449, 59689.057787, 59691.044547, 59691.06433], [59580.208131, 59580.319996, 59603.320213, 59609.198862, 59609.200644, 59609.207785, 59611.170162, 59611.189883, 59611.190774, 59611.244697, 59611.362647, 59618.343089, 59618.352895, 59618.357347, 59621.28043, 59621.281321, 59636.191438, 59636.206316, 59636.213439, 59636.215217, 59641.177457, 59648.32397, 59648.334614, 59650.312586, 59650.325038, 59650.34368, 59652.239672, 59662.153965, 59662.159767, 59663.268806], [59581.121885, 59581.302513, 59592.252789, 59592.254578, 59592.278242, 59592.283605, 59593.349858, 59602.205074, 59602.272004, 59602.273788, 59606.082642, 59606.213345, 59615.051711, 59620.240248, 59620.244708, 59620.270647, 59623.126991, 59623.240481, 59623.360824, 59625.235904, 59625.26376, 59629.073753, 59629.075539, 59633.06776, 59633.078064, 59633.083091, 59633.282074, 59633.290092, 59633.290983, 59633.303924], [59580.087072, 59587.149273, 59587.155533, 59587.315661, 59589.098349, 59591.270955, 59594.342178, 59594.3543, 59595.360002, 59596.044974, 59596.049412, 59597.222104, 59597.306176, 59597.307066, 59597.344536, 59598.076314, 59598.303352, 59598.304241, 59598.348296, 59598.355449, 59599.152155, 59599.32241, 59599.323299, 59600.155106, 59600.289135, 59600.324376, 59600.339586, 59600.341371, 59604.356756, 59605.378338]]

#panstars
#obs = [[59580.24013, 59580.255691, 59581.355116, 59584.32057, 59584.337897, 59586.353193, 59588.347213, 59588.350786, 59589.255418, 59589.276638, 59593.363906, 59596.259974, 59596.283222, 59598.241666, 59599.338154, 59599.345366, 59600.348913, 59600.364681, 59601.294999, 59601.314428, 59611.210692, 59612.098236, 59612.117598, 59624.179581, 59626.137819, 59629.167296, 59629.182918, 59633.068993, 59633.087771, 59633.152919, 59633.172402, 59638.098731, 59646.16272, 59646.183354, 59656.186133, 59660.04596, 59660.066119, 59667.013293, 59667.045423, 59668.987636, 59670.114999, 59670.134013, 59679.995709, 59680.011688, 59683.007278, 59687.035593, 59687.049166, 60622.304605, 60622.325143, 60625.299654, 60625.307954, 60627.303598, 60627.322705, 60627.345503, 60630.357386, 60635.345651, 60635.358868, 60643.322342, 60644.297035, 60645.348303, 60651.227539, 60651.242702, 60657.280604, 60662.195587, 60662.220312, 60662.288394, 60662.301504, 60662.322845, 60664.334518, 60665.229023, 60665.243358, 60665.250533, 60665.272145, 60666.285533, 60666.305669, 60666.312395, 60666.335296, 60668.25091, 60668.267133, 60669.18486, 60669.209549, 60670.186071, 60670.204894, 60680.203568, 60680.219823, 60686.188119, 60686.199651, 60687.137015, 60687.139256, 60687.151301, 60687.169358, 60687.178303, 60688.202464, 60688.222679, 60692.280705, 60692.292927, 60693.25663, 60693.273825, 60697.103264, 60697.114501, 60697.125199, 60697.138793, 60702.196569, 60703.08545, 60703.104631, 60705.136587, 60706.117853, 60720.089358, 60728.031161, 60729.05099, 60729.069235, 60741.090221, 60741.112165, 60750.206587, 60754.01632, 60754.038491, 60763.06904, 60773.035506, 60773.050272, 60778.034732, 60795.070092, 60795.091127, 60801.968326, 60801.983163, 60804.065918, 60809.022911, 60822.98484, 60824.957059, 60824.968695, 60974.345462, 60998.316071, 61001.343837, 61005.313064, 61005.333633, 61014.323653, 61014.348483, 61015.314563, 61015.341106, 61017.290466, 61017.30643, 61019.241893, 61020.354521, 61021.351548, 61021.35602, 61029.207455, 61029.223473, 61029.254296, 61029.268918, 61030.227598, 61033.270005, 61033.287539, 61036.183817, 61037.226985, 61037.242164, 61041.229924, 61041.23216, 61041.236665, 61042.161132, 61042.177474, 61044.14936, 61047.230457, 61047.24702, 61047.294788, 61047.306212, 61047.312549, 61047.325142, 61054.147575, 61054.168198, 61057.134694, 61057.151338, 61058.148375, 61058.165432, 61062.146573, 61065.163502, 61065.17906, 61069.08208, 61075.250971, 61077.310407, 61077.323595, 61081.111863, 61081.129885, 61092.135681, 61092.156395, 61100.086458, 61104.08659, 61105.192658, 61105.204225, 61107.171449, 61107.187451, 61113.100728, 61113.118658, 61122.097309, 61134.147639, 61137.083078, 61137.103518, 61148.127374, 61151.971772, 61152.060383000004, 61152.075474, 61154.980568, 61154.993008, 61160.999532, 61167.990665, 61168.009265, 61170.973915, 61174.971692, 61177.006869, 61188.992823, 61189.008961, 61197.970917, 61355.322365, 61357.346828, 61357.34772, 61363.278299, 61363.294654, 61363.296899, 61363.313503, 61366.280267, 61366.29456, 61369.26992, 61369.293094, 61370.260823, 61370.335526, 61371.326103, 61374.259167, 61374.274873, 61375.267282, 61375.284939, 61375.304408, 61375.326187, 61380.266606, 61384.26722, 61384.284248, 61385.233782, 61385.257785, 61395.186542, 61395.194682, 61396.209621, 61404.187901, 61404.211273, 61408.173545, 61408.18671, 61412.178128, 61413.180711, 61419.136532, 61419.154695, 61419.172649, 61419.193451, 61429.116596, 61429.138592, 61435.156362, 61435.174655, 61441.132364, 61441.152906, 61445.05629, 61445.07487, 61454.063049, 61458.08117, 61465.040087, 61465.053903, 61468.120876, 61468.135222, 61475.054203, 61478.033683, 61482.043209, 61482.058394, 61488.080093, 61500.05796, 61500.079141, 61504.982396, 61510.09566, 61510.11898, 61513.019766, 61513.039117, 61521.994511, 61522.010136, 61534.983826, 61535.000305, 61536.049457, 61539.988096, 61543.022372, 61550.987001, 61551.008555, 61557.976573, 61689.383919, 61706.360733, 61721.323089, 61722.316181, 61722.318425, 61725.308666, 61725.326689, 61728.353007, 61733.293707, 61733.308606, 61740.256871, 61740.274336, 61742.243257, 61742.257573, 61743.249727, 61743.271659, 61745.305369, 61745.319848, 61749.348597, 61751.220822, 61751.222167, 61752.22162, 61752.242019, 61753.216137, 61753.220641, 61757.330316, 61758.285779, 61758.306901, 61759.204653, 61759.221277, 61763.189205, 61763.202901, 61766.223732, 61769.194439, 61769.216437, 61778.156611, 61778.177694, 61785.284292, 61785.298668, 61786.276391, 61786.292025, 61798.126418, 61798.155561, 61806.11578, 61806.131149, 61807.072047, 61812.14254, 61815.160795, 61815.184487, 61825.073752, 61825.094813, 61827.054332, 61827.062903, 61828.054234, 61838.096251, 61850.044368, 61850.063475, 61855.093338, 61855.107118, 61862.990114, 61863.010196, 61867.08355, 61870.080017, 61873.065854, 61875.084445, 61875.106221, 61885.998252, 61895.034659, 61895.054306, 61903.021457, 61903.042458, 61918.989793, 61919.00721, 62081.319934, 62081.336716, 62084.34864, 62091.34888, 62091.352013, 62091.358714, 62092.323715, 62092.342589, 62092.343482, 62100.293261, 62100.312807, 62103.285057, 62103.308877, 62105.250862, 62105.272136, 62106.317065, 62106.342281, 62111.329593, 62112.303238, 62112.31976, 62113.317378, 62118.218696, 62118.239886, 62120.237927, 62120.261053, 62122.351228, 62126.203903, 62126.218412, 62130.19786, 62130.21856, 62131.183648, 62131.204133, 62133.170554, 62135.184581, 62135.202726, 62136.20798, 62143.243374, 62143.266992, 62148.161852, 62148.187395, 62153.160551, 62153.181008, 62155.190714, 62155.207191, 62157.198789, 62157.213371, 62167.242831, 62171.151419, 62178.125527, 62183.037528, 62188.120963, 62188.143167, 62189.114865, 62189.135662, 62194.101011, 62194.121611, 62195.189151, 62211.031286, 62211.048511, 62215.101706, 62215.120493, 62221.028876, 62223.134823, 62223.151678, 62224.142725, 62237.03528, 62237.054243, 62248.034168, 62248.056004, 62254.029919, 62257.018298, 62257.032136, 62261.960328, 62261.973454, 62268.027999, 62277.953785, 62303.95277, 62303.961714, 62428.374278, 62435.35213, 62456.283155, 62459.351421, 62459.354993, 62462.271888, 62462.285587, 62464.352884, 62474.285371, 62477.232829, 62477.255675, 62484.324344, 62486.275086, 62486.298525, 62491.30207, 62491.315182, 62493.285453, 62493.292609, 62493.294394, 62494.282476, 62494.292649, 62494.309014, 62494.3217, 62495.25252, 62495.266576, 62495.278752, 62495.293844, 62499.179058, 62500.185972, 62500.20098, 62500.24315, 62500.266175, 62502.228701, 62509.141675, 62509.153544, 62514.141202, 62514.15968, 62516.138691, 62516.152207, 62519.161601, 62519.183306, 62522.10515, 62522.110972, 62523.234793, 62524.281629, 62524.295265, 62526.178608, 62529.127025, 62529.150941, 62534.146695, 62536.084894, 62536.100755, 62538.102456, 62539.106548, 62539.127049, 62549.142299, 62557.153607, 62557.175166, 62565.015364, 62567.06496, 62567.089457, 62579.126579, 62581.085757, 62585.094098, 62585.118842, 62594.093395, 62597.98369, 62604.989235, 62613.036155, 62613.054419, 62616.043368, 62616.059339, 62620.971688, 62626.042351, 62626.057748, 62645.022446, 62656.948456, 62656.978922, 62656.998245, 62808.362034, 62813.350703, 62822.297316, 62822.313949, 62822.327904, 62830.321992, 62834.253252, 62834.273713, 62837.355655, 62842.249877, 62842.263479, 62842.288468, 62842.303041, 62844.338062, 62845.223099, 62845.237545, 62845.265717, 62845.276236, 62849.265459, 62849.287342, 62849.301768, 62849.319077, 62849.326083, 62851.278652, 62851.295605, 62852.31649, 62852.334942, 62863.185068, 62863.200517, 62866.237356, 62866.253098, 62871.214391, 62871.221997, 62871.225581, 62875.154524, 62879.237534, 62879.257462, 62883.159977, 62886.206845, 62886.211772, 62889.1918, 62891.130158, 62895.160322, 62895.183413, 62907.05865, 62913.092849, 62913.111104, 62921.037284, 62921.057824, 62936.035104, 62939.010865, 62941.037501, 62941.050438, 62951.039133, 62958.064214, 62958.082503, 62962.024406, 62967.049864, 62967.067593, 62978.036644, 62978.057719, 62984.972454, 62984.986259, 62987.979253, 63001.966389, 63004.962842, 63160.370591, 63167.354609, 63169.36102, 63170.347523, 63170.36999, 63171.366122, 63183.333133, 63185.330379, 63185.336916, 63188.309489, 63188.332185, 63190.279426, 63190.299811, 63191.322084], [59611.210692, 59638.098731, 60643.322342, 60644.297035, 60702.196569, 60705.136587, 60706.117853, 60763.06904, 60822.98484, 60998.316071, 61030.227598, 61062.146573, 61122.097309, 61177.006869, 61380.266606, 61412.178128, 61413.180711, 61475.054203, 61557.976573, 61766.223732, 61798.126418, 61798.155561, 61828.054234, 61885.998252, 62092.323715, 62148.161852, 62148.187395, 62178.125527, 62268.027999, 62474.285371, 62502.228701, 62534.146695, 62538.102456, 62594.093395, 62886.206845, 62886.211772, 62889.1918, 62891.130158, 62951.039133, 63185.330379], [59580.24013, 59580.255691, 59633.068993, 59633.087771, 60622.304605, 60622.325143, 60669.18486, 60669.209549, 60670.186071, 60670.204894, 60754.01632, 60754.038491, 60974.345462, 61037.226985, 61037.242164, 61054.147575, 61054.168198, 61092.135681, 61092.156395, 61355.322365, 61384.26722, 61384.284248, 61408.173545, 61408.18671, 61441.132364, 61441.152906, 61521.994511, 61522.010136, 61740.256871, 61740.274336, 61763.189205, 61763.202901, 61850.044368, 61850.063475, 62118.218696, 62118.239886, 62120.237927, 62120.261053, 62155.190714, 62155.207191, 62237.03528, 62237.054243, 62477.232829, 62477.255675, 62499.179058, 62509.141675, 62509.153544, 62567.06496, 62567.089457, 62656.978922, 62656.998245, 62866.237356, 62866.253098, 62883.159977, 62921.037284, 62921.057824, 63188.309489, 63188.332185], [59588.347213, 59589.255418, 59589.276638, 59612.098236, 59612.117598, 59646.16272, 59646.183354, 59667.013293, 59667.045423, 60651.227539, 60651.242702, 60665.229023, 60665.243358, 60665.250533, 60665.272145, 60668.25091, 60668.267133, 60697.103264, 60697.114501, 60697.125199, 60697.138793, 60703.08545, 60703.104631, 60729.05099, 60729.069235, 60795.070092, 60795.091127, 61005.313064, 61005.333633, 61019.241893, 61029.207455, 61029.223473, 61029.254296, 61029.268918, 61057.134694, 61057.151338, 61065.163502, 61065.17906, 61081.111863, 61081.129885, 61113.100728, 61113.118658, 61148.127374, 61152.060383000004, 61152.075474, 61375.267282, 61375.284939, 61375.304408, 61375.326187, 61385.233782, 61385.257785, 61419.136532, 61419.154695, 61419.172649, 61419.193451, 61435.156362, 61435.174655, 61465.040087, 61465.053903, 61500.05796, 61500.079141, 61536.049457, 61550.987001, 61551.008555, 61742.243257, 61742.257573, 61743.249727, 61743.271659, 61758.285779, 61758.306901, 61759.204653, 61759.221277, 61806.11578, 61806.131149, 61825.073752, 61825.094813, 61855.093338, 61855.107118, 61918.989793, 61919.00721, 62100.293261, 62100.312807, 62113.317378, 62126.203903, 62126.218412, 62143.243374, 62143.266992, 62157.198789, 62157.213371, 62171.151419, 62188.120963, 62188.143167, 62211.031286, 62211.048511, 62248.034168, 62248.056004, 62500.185972, 62500.20098, 62500.24315, 62500.266175, 62526.178608, 62529.127025, 62529.150941, 62536.084894, 62536.100755, 62539.106548, 62539.127049, 62557.153607, 62557.175166, 62585.094098, 62585.118842, 62616.043368, 62616.059339, 62645.022446, 62822.297316, 62822.313949, 62822.327904, 62834.253252, 62834.273713, 62852.31649, 62852.334942, 62863.185068, 62863.200517, 62895.160322, 62895.183413, 62941.037501, 62941.050438, 62978.036644, 62978.057719, 63191.322084], [59584.32057, 59584.337897, 59601.294999, 59601.314428, 59633.152919, 59633.172402, 59660.04596, 59660.066119, 59670.114999, 59670.134013, 60662.195587, 60662.220312, 60662.288394, 60662.301504, 60662.322845, 60664.334518, 60666.285533, 60666.305669, 60666.312395, 60666.335296, 60680.203568, 60680.219823, 60692.280705, 60692.292927, 60693.25663, 60693.273825, 60741.090221, 60741.112165, 61017.290466, 61017.30643, 61033.270005, 61033.287539, 61047.230457, 61047.24702, 61047.294788, 61047.306212, 61047.312549, 61047.325142, 61058.148375, 61058.165432, 61077.310407, 61077.323595, 61107.171449, 61107.187451, 61137.083078, 61137.103518, 61167.990665, 61168.009265, 61363.278299, 61363.294654, 61363.296899, 61363.313503, 61371.326103, 61374.259167, 61374.274873, 61404.187901, 61404.211273, 61445.05629, 61445.07487, 61468.120876, 61468.135222, 61510.09566, 61510.11898, 61534.983826, 61535.000305, 61733.293707, 61733.308606, 61745.305369, 61745.319848, 61757.330316, 61769.194439, 61769.216437, 61785.284292, 61785.298668, 61786.276391, 61786.292025, 61827.054332, 61827.062903, 61873.065854, 61875.084445, 61875.106221, 61903.021457, 61903.042458, 62081.319934, 62081.336716, 62111.329593, 62112.303238, 62112.31976, 62130.19786, 62130.21856, 62153.160551, 62153.181008, 62189.114865, 62189.135662, 62215.101706, 62215.120493, 62257.018298, 62257.032136, 62435.35213, 62484.324344, 62486.275086, 62486.298525, 62494.282476, 62494.292649, 62494.309014, 62494.3217, 62495.25252, 62495.266576, 62495.278752, 62495.293844, 62524.281629, 62524.295265, 62613.036155, 62613.054419, 62626.042351, 62626.057748, 62830.321992, 62849.265459, 62849.287342, 62849.301768, 62849.319077, 62849.326083, 62851.278652, 62851.295605, 62879.237534, 62879.257462, 62913.092849, 62913.111104, 62967.049864, 62967.067593, 63183.333133, 63185.336916, 63190.279426, 63190.299811], [59581.355116, 59586.353193, 59596.259974, 59596.283222, 59600.348913, 59600.364681, 59629.167296, 59629.182918, 59679.995709, 59680.011688, 59687.035593, 59687.049166, 60627.303598, 60627.322705, 60627.345503, 60635.345651, 60635.358868, 60686.188119, 60686.199651, 60688.202464, 60688.222679, 60728.031161, 60773.035506, 60773.050272, 60801.968326, 60801.983163, 60824.957059, 60824.968695, 61001.343837, 61014.323653, 61014.348483, 61015.314563, 61015.341106, 61036.183817, 61042.161132, 61042.177474, 61105.192658, 61105.204225, 61154.980568, 61154.993008, 61170.973915, 61188.992823, 61189.008961, 61366.280267, 61366.29456, 61369.26992, 61369.293094, 61429.116596, 61429.138592, 61478.033683, 61482.043209, 61482.058394, 61513.019766, 61513.039117, 61689.383919, 61725.308666, 61725.326689, 61728.353007, 61749.348597, 61752.22162, 61752.242019, 61778.156611, 61778.177694, 61815.160795, 61815.184487, 61862.990114, 61863.010196, 61895.034659, 61895.054306, 62103.285057, 62103.308877, 62105.250862, 62105.272136, 62106.317065, 62106.342281, 62131.183648, 62131.204133, 62135.184581, 62135.202726, 62194.101011, 62194.121611, 62223.134823, 62223.151678, 62261.960328, 62261.973454, 62428.374278, 62462.271888, 62462.285587, 62464.352884, 62491.30207, 62491.315182, 62514.141202, 62514.15968, 62516.138691, 62516.152207, 62519.161601, 62519.183306, 62565.015364, 62597.98369, 62620.971688, 62813.350703, 62842.249877, 62842.263479, 62842.288468, 62842.303041, 62845.223099, 62845.237545, 62845.265717, 62845.276236, 62958.064214, 62958.082503, 62984.972454, 62984.986259, 63167.354609, 63169.36102, 63170.347523, 63170.36999], [59588.350786, 59593.363906, 59598.241666, 59599.338154, 59599.345366, 59624.179581, 59626.137819, 59656.186133, 59668.987636, 59683.007278, 60625.299654, 60625.307954, 60630.357386, 60645.348303, 60657.280604, 60687.137015, 60687.139256, 60687.151301, 60687.169358, 60687.178303, 60720.089358, 60750.206587, 60778.034732, 60804.065918, 60809.022911, 61020.354521, 61021.351548, 61021.35602, 61041.229924, 61041.23216, 61041.236665, 61044.14936, 61069.08208, 61075.250971, 61100.086458, 61104.08659, 61134.147639, 61151.971772, 61160.999532, 61174.971692, 61197.970917, 61357.346828, 61357.34772, 61370.260823, 61370.335526, 61395.186542, 61395.194682, 61396.209621, 61454.063049, 61458.08117, 61488.080093, 61504.982396, 61539.988096, 61543.022372, 61706.360733, 61721.323089, 61722.316181, 61722.318425, 61751.220822, 61751.222167, 61753.216137, 61753.220641, 61807.072047, 61812.14254, 61838.096251, 61867.08355, 61870.080017, 62084.34864, 62091.34888, 62091.352013, 62091.358714, 62092.342589, 62092.343482, 62122.351228, 62133.170554, 62136.20798, 62167.242831, 62183.037528, 62195.189151, 62221.028876, 62224.142725, 62254.029919, 62277.953785, 62303.95277, 62303.961714, 62456.283155, 62459.351421, 62459.354993, 62493.285453, 62493.292609, 62493.294394, 62522.10515, 62522.110972, 62523.234793, 62549.142299, 62579.126579, 62581.085757, 62604.989235, 62656.948456, 62808.362034, 62837.355655, 62844.338062, 62871.214391, 62871.221997, 62871.225581, 62875.154524, 62907.05865, 62936.035104, 62939.010865, 62962.024406, 62987.979253, 63001.966389, 63004.962842, 63160.370591, 63171.366122]]

# In[19]:


def magUncertainy(Filter, objectmag, exposuretime,background, FWHM): # b is background counts per pixel   
    countsPS = 10**((Filter-objectmag)/2.5)
    counts = countsPS * exposuretime
    uncertainty = 1/(counts/((counts/2.3)+(((background/2.3)+(12.7**2))*2.266*((FWHM/0.2)**2)))**0.5) # gain assumed to be 1
    return uncertainty
#from lsst should have got the website! https://smtn-002.lsst.io/


# In[20]:


def averageFlux(observations, Frequency, exptime):
    b = [0]*len(observations)
    for seconds in range(0, exptime):
        a = [np.sin((2*np.pi*(Frequency))*(x+(seconds/(3600*24)))) for x in observations] # optical modulation
        b = map(add, a, b)
    c = [z/exptime for z in b]
    return c

def Flux(observations,Frequency,exptime):
    a = [np.sin((2*np.pi*(Frequency)*x)) for x in observations]
    return a


# In[21]:


def ellipsoidalFlux(observations, Frequency,exptime):
    period = 1/(Frequency)
    phase = [(x % (2*period)) for x in observations]
    b = [0]*len(observations)
    for seconds in range(0, exptime):
        a = [np.sin((2*np.pi*(Frequency))*(x+(seconds/(3600*24)))) for x in observations] # optical modulation
        b = map(add, a, b)
    c = [z/exptime for z in b]
    
    for x in range(0,len(phase)):
        if (phase[x]+(1.5*period)) < (3*period):
            c[x] = c[x]*(1./3.)
        else:
            c[x] = c[x]*(2./3.)
    return c
## this is doing something but not the right something, come back to it 


# In[22]:


def flaring(B, length, dayinsec=86400,amplitude=1):   
    global flareMag, minutes
    fouriers = np.linspace(0.00001,0.05,(dayinsec/30))
    logF = [np.log(x) for x in fouriers] # start at 30 go to a day in 30 sec increments
    real = [random.gauss(0,1)*((1/x)**(B/2)) for x in fouriers] #random.gauss(mu,sigma) to change for values from zurita
    # imaginary = [random.gauss(0,1)*((1/x)**(B/2)) for x in fouriers]
    IFT = np.fft.ifft(real)
    seconds = np.linspace(0,dayinsec, (dayinsec/30)) # the day in 30 sec increments
    minutes = [x for x in seconds]
    minimum = (np.max(-IFT))
    positive = [x + minimum for x in IFT] # what did this even achieve? it helped with normalisation!
    normalised = [x/(np.mean(positive)) for x in positive] # find normalisation
    normalisedmin = minimum/(np.mean(positive))
    normalised = [x - normalisedmin for x in normalised]
    flareMag = [amplitude * x for x in normalised] # normalise to amplitude
    logmins = [np.log(d) for d in minutes] # for plotting?
#     plt.plot(minutes,flareMag)
#     plt.title('lightcurve')
#     plt.show()
    return flareMag


# In[55]:


def lombScargle(frequencyRange,objectmag=20,loopNo=looooops,df=0.001,fmin=0.001,numsteps=100000,modulationAmplitude=0.1,Nquist=200): # frequency range and object mag in list
    #global totperiod, totmperiod, totpower, date, amplitude, frequency, periods, LSperiod, power, mag, error, SigLevel
    results = {}
    totperiod = []
    totmperiod = []
    totpower = [] # reset
    SigLevel = []
    filterletter = ['o','u','g','r','i','z','y']
    
    period = 1/(frequencyRange)
    if period > 0.5:
        numsteps = 10000
    elif period > 0.01:
        numsteps = 100000
    else:
        numsteps = 200000
    freqs = fmin + df * np.arange(numsteps) # for manuel
    allobsy, uobsy, gobsy, robsy, iobsy, zobsy, yobsy = [], [], [], [], [], [], [] #reset
    measuredpower = [] # reset
    y = [allobsy, uobsy, gobsy, robsy, iobsy, zobsy, yobsy] # for looping only
    for z in range(1, len(y)):
        #y[z] = averageFlux(obs[z], frequencyRange[frange], 30)  # amplitde calculation for observations, anf frequency range
        y[z] = ellipsoidalFlux(obs[z], frequencyRange,30)
        y[z] = [modulationAmplitude * t for t in y[z]] # scaling
        for G in range(0, len(y[z])):
            flareMinute = int(round((obs[z][G]*24*60*2)%((dayinsec/(30*2))*flarecycles)))
            y[z][G] = y[z][G] + longflare[flareMinute] # add flares swapped to second but not changing the name intrtoduces fewer bugs
    date = []
    amplitude = []
    mag = []
    error = []
    filts = []
    for z in range(1, len(y)):
        if objectmag[z] > sat[z] and objectmag[z] < lim[z]:
            #date.extend([x for x in obs[z]])
            date.extend(obs[z])
            amplitude = [t + random.gauss(0,magUncertainy(zeroPoints[z],objectmag[z],30,background,FWHMeff[z])) for t in y[z]] # scale amplitude and add poisson noise
            mag.extend([objectmag[z] - t for t in amplitude]) # add actual mag
            error.extend([sigSys + magUncertainy(zeroPoints[z],objectmag[z],30,background,FWHMeff[z])+0.2]*len(amplitude))
            filts.extend([filterletter[z]]*len(amplitude))

            phase = [(day % (period*2))/(period*2) for day in obs[z]]
            pmag = [objectmag[z] - t for t in amplitude]
#         plt.plot(phase, pmag, 'o', markersize=4)
#         plt.xlabel('Phase')
#         plt.ylabel('Magnitude')
#         plt.gca().invert_yaxis()
#         plt.title('filter'+str(z)+', Period = '+str(period))#+', MeasuredPeriod = '+str(LSperiod)+', Periodx20 = '+(str(period*20)))
#         plt.show()

#     plt.plot(date, mag, 'o')
#     plt.xlim(lower,higher)
#     plt.xlabel('time (days)')
#     plt.ylabel('mag')
#     plt.gca().invert_yaxis()
#     plt.show()

    model = periodic.LombScargleMultibandFast(fit_period=False)
    model.fit(date, mag, error, filts)
    power = model.score_frequency_grid(fmin, df, numsteps) 

    if period > 10.:
        model.optimizer.period_range=(10, 110)
    elif period > 0.51:
        model.optimizer.period_range=(0.5, 10)
    elif period > 0.011:
        model.optimizer.period_range=(0.01, 0.52)
    else:
        model.optimizer.period_range=(0.0029, 0.012)


    LSperiod = model.best_period
    if period < 10:
        higher = 10
    else:
        higher = 100
#     fig, ax = plt.subplots()
#     ax.plot(1./freqs, power)
#     ax.set(xlim=(0, higher), ylim=(0, 1.2),
#            xlabel='period (days)',
#            ylabel='Lomb-Scargle Power',
#           title='Period = '+str(period)+', MeasuredPeriod = '+str(LSperiod)+', Periodx20 = '+(str(period*20)));
#     plt.show()


    phase = [(day % (period*2))/(period*2) for day in date]
    #idealphase = [(day % (period*2))/(period*2) for day in dayZ]
    #print(len(phase),len(idealphase))
    #plt.plot(idealphase,Zmag,'ko',)
#     plt.plot(phase, mag, 'o', markersize=4)
#     plt.xlabel('Phase')
#     plt.ylabel('Magnitude')
#     plt.gca().invert_yaxis()
#     plt.title('Period = '+str(period)+', MeasuredPeriod = '+str(LSperiod)+', Periodx20 = '+(str(period*20)))
#     plt.show()
    #print(period, LSperiod, period*20)

#         print('actualperiod', period, 'measured period', np.mean(LSperiod),power.max())# 'power',np.mean(power[maxpos]))
#         print(frequencyRange[frange], 'z', z)

#     totperiod.append(period)
#     totmperiod.append(np.mean(LSperiod))
#     totpower.append(power.max())
    mpower = power.max()
    measuredpower.append(power.max()) # should this correspond to period power and not max power?
    maxpower = []           
    counter = 0.
    for loop in range(0,loopNo):
        random.shuffle(date)
        model = periodic.LombScargleMultibandFast(fit_period=False)
        model.fit(date, mag, error, filts)
        power = model.score_frequency_grid(fmin, df, numsteps)  
        maxpower.append(power.max())


    for X in range(0, len(maxpower)):
        if maxpower[X] > measuredpower[-1]:
            counter = counter + 1. 
    Significance = (1.-(counter/len(maxpower)))
    #print('sig', Significance, 'counter', counter)
    SigLevel.append(Significance)
    
    #freqnumber = FrangeLoop.index(frequencyRange)
    #magnumber = MagRange.index(objectmag)
    #print(fullmaglist)
    #listnumber = (magnumber*maglength)+freqnumber
#     print(listnumber)
#     measuredperiodlist[listnumber] = LSperiod
#     periodlist[listnumber] = period
#     powerlist[listnumber] = mpower
#     siglist[listnumber] = Significance
#     fullmaglist[listnumber] = objectmag
# results order, 0=mag,1=period,2=measuredperiod,3=siglevel,4=power,5=listnumber
    results[0] = objectmag[3]
    results[1] = period
    results[2] = LSperiod
    results[3] = Significance
    results[4] = mpower
    results[5] = 0#listnumber
    return results


# In[24]:


#findObservations([(630,)])
#remove25(obs)
#averageFlux(obs[0], 1, 30)
longflare = []
for floop in range(0,flarecycles):
    flareone = flaring(-1, flareperiod, amplitude=0.3)
    flareone = flareone[0:1440]
    positiveflare = [abs(x) for x in flareone]
    longflare.extend(positiveflare)
    


# In[25]:


PrangeLoop = np.logspace(-2.5,2,freqlength)
FrangeLoop = [(1/x) for x in PrangeLoop]


# In[26]:


# reset results file
with open(inFile,'w') as f:
    f.write('fullmaglist \n\n periodlist \n\n measuredperiodlist \n\n siglist \n\n powerlist \n\n listnumberlist \n\n end of file')


# In[57]:


results = []
fullmeasuredPeriod = []
fullPeriod = []
fullPower = []
fullSigLevel = []
fullMag = []
MagRangearray = np.linspace(17,24,maglength)
MagRange = [x for x in MagRangearray]
maglist = []
for x in range(len(MagRange)):
    maglist.append([MagRange[x]]*7)


newlist = [[17.097580602531785, 21.677168034370336, 17.423809360094822, 17.349235564579718, 17.614919002070089, 18.294106741014705, 19.582306498294539], [17.464972002647237, 22.044620365967209, 17.791248344095763, 17.716660377784983, 17.982335156977992, 18.661517589224225, 19.949713892005114], [17.8316421315958, 22.411351302866567, 18.157965960459698, 18.08336385208268, 18.349029990531896, 19.028207126838385, 20.316399982123873], [18.204338405969402, 22.78406530388504, 18.530676078295169, 18.456069847243686, 18.721733466755911, 19.40090905919779, 20.689100909474462], [18.572116934238949, 23.15187749425025, 18.898480894671753, 18.823866834848204, 19.089525671013178, 19.7686983317261, 21.056888273536551], [18.939113291599906, 23.518908378421262, 19.265504215430571, 19.190882125728884, 19.456536055671634, 20.135705709345125, 21.423893693664535], [19.310630422768391, 23.890425509589743, 19.637021346599056, 19.562399256897365, 19.828053186840116, 20.507222840513609, 21.79541082483302], [19.6764043696664, 24.256226509694912, 20.002816420452813, 19.928188039004031, 20.193838124715413, 20.8730054222471, 22.161191872789992], [20.046253081613862, 24.626130316301701, 20.372708158072712, 20.298066963294232, 20.563709220114337, 21.242871719293305, 22.531055046254789], [20.41283710298838, 24.992777276530322, 20.739341330972131, 20.664685498544593, 20.930318811821863, 21.609475829474572, 22.897655588129489], [20.782668890994707, 25.362609064536645, 21.109173118978457, 21.034517286550919, 21.300150599828186, 21.979307617480899, 23.267487376135815], [21.150783183391159, 25.730723356933098, 21.47728741137491, 21.402631578947371, 21.668264892224638, 22.347421909877351, 23.635601668532267], [21.519204236022734, 26.099144409564673, 21.845708464006485, 21.771052631578947, 22.036685944856213, 22.715842962508926, 24.004022721163842], [21.887625288654316, 26.467565462196255, 22.214129516638067, 22.139473684210529, 22.405106997487795, 23.084264015140509, 24.372443773795425], [22.256046341285895, 26.835986514827834, 22.582550569269646, 22.507894736842108, 22.773528050119374, 23.452685067772087, 24.740864826427003], [22.624467393917474, 27.204407567459413, 22.950971621901225, 22.876315789473686, 23.141949102750953, 23.821106120403666, 25.109285879058582], [22.992888446549053, 27.572828620090991, 23.319392674532804, 23.244736842105265, 23.510370155382532, 24.189527173035245, 25.477706931690161], [23.361309499180631, 27.94124967272257, 23.687813727164382, 23.613157894736844, 23.87879120801411, 24.557948225666824, 25.84612798432174], [23.72973055181221, 28.309670725354149, 24.056234779795961, 23.981578947368423, 24.247212260645689, 24.926369278298402, 26.214549036953319], [24.098151604443789, 28.678091777985728, 24.42465583242754, 24.350000000000001, 24.615633313277268, 25.294790330929981, 26.582970089584897]]

pool = Pool(processors)
for h in range(startnumber,endnumber):
    print(newlist[h])
    results.append(pool.map(partial(lombScargle, objectmag=newlist[h]),FrangeLoop))
    
    twoDlist = [[],[],[],[],[],[]]
    for X in range(len(results)):
        for Y in range(len(results[X])):
            twoDlist[0].append(results[X][Y][0])
            twoDlist[1].append(results[X][Y][1])
            twoDlist[2].append(results[X][Y][2])
            twoDlist[3].append(results[X][Y][3])
            twoDlist[4].append(results[X][Y][4])
            twoDlist[5].append(results[X][Y][5])
    with open(inFile, 'r') as istr:
        with open(outFile,'w') as ostr:
            for i, line in enumerate(istr):
                # Get rid of the trailing newline (if any).
                line = line.rstrip('\n')
                if i % 2 != 0:
                    line += str(twoDlist[int((i-1)/2)])+','
                ostr.write(line+'\n')

